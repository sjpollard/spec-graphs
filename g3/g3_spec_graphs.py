import numpy as np
from matplotlib import pyplot as plt

def g3_tiny_gnu9_mpi_time(times):
    times = np.log10(times)
    plt.title("Tiny suite - Graviton3 - GNU 9 Compiler - MPI Runtime (64 ranks/node)")
    plt.xticks([1,2,4,8])
    plt.xlim([1, 8])
    plt.ylim([2, 3.4])
    plt.plot([1,2,4,8], times.T[0], marker="x", label="lbm")
    plt.plot([1,2,4,8], times.T[1], marker="x", label="soma")
    plt.plot([1,2,4,8], times.T[2], marker="x", label="tealeaf")
    plt.plot([1,2,4,8], times.T[3], marker="x", label="clvleaf")
    plt.plot([1,2,4,8], times.T[4], marker="x", label="miniswp")
    plt.plot([1,2,4,8], times.T[5], marker="x", label="pot3d")
    plt.plot([1,2,4,8], times.T[6], marker="x", label="sph_exa")
    plt.plot([1,2,4,8], times.T[7], marker="x", label="hpgmgfv")
    plt.plot([1,2,4,8], times.T[8], marker="x", label="weather")
    plt.legend(loc="upper right")
    plt.xlabel("Number of nodes (64 cores/node)")
    plt.ylabel("$log_{10}$ Time(s)")
    plt.savefig("g3_tiny_gnu9_mpi_time.pdf")
    plt.clf()

def g3_tiny_gnu9_mpi_speedup(times):
    speedup = times[0]/times
    plt.title("Tiny suite - Graviton3 - GNU 9 Compiler - MPI Speedup (64 ranks/node)")
    plt.xticks([1,2,4,8])
    plt.xlim([1, 8])
    plt.ylim([1, 10])
    plt.plot(np.arange(0, 9), c="grey", linestyle="--")
    plt.plot([1,2,4,8], speedup.T[0], marker="x", label="lbm")
    plt.plot([1,2,4,8], speedup.T[1], marker="x", label="soma")
    plt.plot([1,2,4,8], speedup.T[2], marker="x", label="tealeaf")
    plt.plot([1,2,4,8], speedup.T[3], marker="x", label="clvleaf")
    plt.plot([1,2,4,8], speedup.T[4], marker="x", label="miniswp")
    plt.plot([1,2,4,8], speedup.T[5], marker="x", label="pot3d")
    plt.plot([1,2,4,8], speedup.T[6], marker="x", label="sph_exa")
    plt.plot([1,2,4,8], speedup.T[7], marker="x", label="hpgmgfv")
    plt.plot([1,2,4,8], speedup.T[8], marker="x", label="weather")
    plt.legend(loc="upper left")
    plt.xlabel("Number of nodes (64 cores/node)")
    plt.ylabel("Speedup")
    plt.savefig("g3_tiny_gnu9_mpi_speedup.pdf")
    plt.clf()

def g3_tiny_gnu9_mpi_efficiency(times):
    speedup = times[0]/times
    efficiency = speedup/np.array([[1],[2],[4],[8]]) * 100
    plt.title("Tiny suite - Graviton3 - GNU 9 Compiler - MPI Efficiency (64 ranks/node)")
    plt.xticks([1,2,4,8])
    plt.xlim([1, 8])
    plt.ylim([40, 120])
    plt.axhline(y=100, c="grey", linestyle="--")
    plt.plot([1,2,4,8], efficiency.T[0], marker="x", label="lbm")
    plt.plot([1,2,4,8], efficiency.T[1], marker="x", label="soma")
    plt.plot([1,2,4,8], efficiency.T[2], marker="x", label="tealeaf")
    plt.plot([1,2,4,8], efficiency.T[3], marker="x", label="clvleaf")
    plt.plot([1,2,4,8], efficiency.T[4], marker="x", label="miniswp")
    plt.plot([1,2,4,8], efficiency.T[5], marker="x", label="pot3d")
    plt.plot([1,2,4,8], efficiency.T[6], marker="x", label="sph_exa")
    plt.plot([1,2,4,8], efficiency.T[7], marker="x", label="hpgmgfv")
    plt.plot([1,2,4,8], efficiency.T[8], marker="x", label="weather")
    plt.legend(loc="lower left")
    plt.xlabel("Number of nodes (64 cores/node)")
    plt.ylabel("Parallel efficiency(%)")
    plt.savefig("g3_tiny_gnu9_mpi_efficiency.pdf")
    plt.clf()

def g3_tiny_gnu9_omp_1ppn_time(times):
    times = np.log10(times)
    plt.title("Tiny suite - Graviton3 - GNU 9 Compiler - OMP Runtime (1 ranks/node)")
    plt.xticks([1,2,4,8])
    plt.xlim([1, 8])
    plt.ylim([2, 3.4])
    plt.plot([1,2,4,8], times.T[0], marker="x", label="lbm")
    plt.plot([1,2,4,8], times.T[1], marker="x", label="soma")
    plt.plot([1,2,4,8], times.T[2], marker="x", label="tealeaf")
    plt.plot([1,2,4,8], times.T[3], marker="x", label="clvleaf")
    plt.plot([1,2,4,8], times.T[4], marker="x", label="miniswp")
    plt.plot([1,2,4,8], times.T[5], marker="x", label="pot3d")
    plt.plot([1,2,4,8], times.T[6], marker="x", label="sph_exa")
    plt.plot([1,2,4,8], times.T[7], marker="x", label="hpgmgfv")
    plt.plot([1,2,4,8], times.T[8], marker="x", label="weather")
    plt.legend(loc="upper right")
    plt.xlabel("Number of nodes (64 cores/node)")
    plt.ylabel("$log_{10}$ Time(s)")
    plt.savefig("g3_tiny_gnu9_omp_1ppn_time.pdf")
    plt.clf()

def g3_tiny_gnu9_omp_1ppn_speedup(times):
    speedup = times[0]/times
    plt.title("Tiny suite - Graviton3 - GNU 9 Compiler - OMP Speedup (1 ranks/node)")
    plt.xticks([1,2,4,8])
    plt.xlim([1, 8])
    plt.ylim([1, 12])
    plt.plot(np.arange(0, 9), c="grey", linestyle="--")
    plt.plot([1,2,4,8], speedup.T[0], marker="x", label="lbm")
    plt.plot([1,2,4,8], speedup.T[1], marker="x", label="soma")
    plt.plot([1,2,4,8], speedup.T[2], marker="x", label="tealeaf")
    plt.plot([1,2,4,8], speedup.T[3], marker="x", label="clvleaf")
    plt.plot([1,2,4,8], speedup.T[4], marker="x", label="miniswp")
    plt.plot([1,2,4,8], speedup.T[5], marker="x", label="pot3d")
    plt.plot([1,2,4,8], speedup.T[6], marker="x", label="sph_exa")
    plt.plot([1,2,4,8], speedup.T[7], marker="x", label="hpgmgfv")
    plt.plot([1,2,4,8], speedup.T[8], marker="x", label="weather")
    plt.legend(loc="upper left")
    plt.xlabel("Number of nodes (64 cores/node)")
    plt.ylabel("Speedup")
    plt.savefig("g3_tiny_gnu9_omp_1ppn_speedup.pdf")
    plt.clf()

def g3_tiny_gnu9_omp_1ppn_efficiency(times):
    speedup = times[0]/times
    efficiency = speedup/np.array([[1],[2],[4],[8]]) * 100
    plt.title("Tiny suite - Graviton3 - GNU 9 Compiler - OMP Efficiency (1 ranks/node)")
    plt.xticks([1,2,4,8])
    plt.xlim([1, 8])
    plt.ylim([30, 140])
    plt.axhline(y=100, c="grey", linestyle="--")
    plt.plot([1,2,4,8], efficiency.T[0], marker="x", label="lbm")
    plt.plot([1,2,4,8], efficiency.T[1], marker="x", label="soma")
    plt.plot([1,2,4,8], efficiency.T[2], marker="x", label="tealeaf")
    plt.plot([1,2,4,8], efficiency.T[3], marker="x", label="clvleaf")
    plt.plot([1,2,4,8], efficiency.T[4], marker="x", label="miniswp")
    plt.plot([1,2,4,8], efficiency.T[5], marker="x", label="pot3d")
    plt.plot([1,2,4,8], efficiency.T[6], marker="x", label="sph_exa")
    plt.plot([1,2,4,8], efficiency.T[7], marker="x", label="hpgmgfv")
    plt.plot([1,2,4,8], efficiency.T[8], marker="x", label="weather")
    plt.legend(loc="lower left")
    plt.xlabel("Number of nodes (64 cores/node)")
    plt.ylabel("Parallel efficiency(%)")
    plt.savefig("g3_tiny_gnu9_omp_1ppn_efficiency.pdf")
    plt.clf()

def g3_tiny_gnu9_omp_2ppn_time(times):
    times = np.log10(times)
    plt.title("Tiny suite - Graviton3 - GNU 9 Compiler - OMP Runtime (2 ranks/node)")
    plt.xticks([1,2,4,8])
    plt.xlim([1, 8])
    plt.ylim([2, 3.4])
    plt.plot([1,2,4,8], times.T[0], marker="x", label="lbm")
    plt.plot([1,2,4,8], times.T[1], marker="x", label="soma")
    plt.plot([1,2,4,8], times.T[2], marker="x", label="tealeaf")
    plt.plot([1,2,4,8], times.T[3], marker="x", label="clvleaf")
    plt.plot([1,2,4,8], times.T[4], marker="x", label="miniswp")
    plt.plot([1,2,4,8], times.T[5], marker="x", label="pot3d")
    plt.plot([1,2,4,8], times.T[6], marker="x", label="sph_exa")
    plt.plot([1,2,4,8], times.T[7], marker="x", label="hpgmgfv")
    plt.plot([1,2,4,8], times.T[8], marker="x", label="weather")
    plt.legend(loc="upper right")
    plt.xlabel("Number of nodes (64 cores/node)")
    plt.ylabel("$log_{10}$ Time(s)")
    plt.savefig("g3_tiny_gnu9_omp_2ppn_time.pdf")
    plt.clf()

def g3_tiny_gnu9_omp_2ppn_speedup(times):
    speedup = times[0]/times
    plt.title("Tiny suite - Graviton3 - GNU 9 Compiler - OMP Speedup (2 ranks/node)")
    plt.xticks([1,2,4,8])
    plt.xlim([1, 8])
    plt.ylim([1, 12])
    plt.plot(np.arange(0, 9), c="grey", linestyle="--")
    plt.plot([1,2,4,8], speedup.T[0], marker="x", label="lbm")
    plt.plot([1,2,4,8], speedup.T[1], marker="x", label="soma")
    plt.plot([1,2,4,8], speedup.T[2], marker="x", label="tealeaf")
    plt.plot([1,2,4,8], speedup.T[3], marker="x", label="clvleaf")
    plt.plot([1,2,4,8], speedup.T[4], marker="x", label="miniswp")
    plt.plot([1,2,4,8], speedup.T[5], marker="x", label="pot3d")
    plt.plot([1,2,4,8], speedup.T[6], marker="x", label="sph_exa")
    plt.plot([1,2,4,8], speedup.T[7], marker="x", label="hpgmgfv")
    plt.plot([1,2,4,8], speedup.T[8], marker="x", label="weather")
    plt.legend(loc="upper left")
    plt.xlabel("Number of nodes (64 cores/node)")
    plt.ylabel("Speedup")
    plt.savefig("g3_tiny_gnu9_omp_2ppn_speedup.pdf")
    plt.clf()

def g3_tiny_gnu9_omp_2ppn_efficiency(times):
    speedup = times[0]/times
    efficiency = speedup/np.array([[1],[2],[4],[8]]) * 100
    plt.title("Tiny suite - Graviton3 - GNU 9 Compiler - OMP Efficiency (2 ranks/node)")
    plt.xticks([1,2,4,8])
    plt.xlim([1, 8])
    plt.ylim([40, 140])
    plt.axhline(y=100, c="grey", linestyle="--")
    plt.plot([1,2,4,8], efficiency.T[0], marker="x", label="lbm")
    plt.plot([1,2,4,8], efficiency.T[1], marker="x", label="soma")
    plt.plot([1,2,4,8], efficiency.T[2], marker="x", label="tealeaf")
    plt.plot([1,2,4,8], efficiency.T[3], marker="x", label="clvleaf")
    plt.plot([1,2,4,8], efficiency.T[4], marker="x", label="miniswp")
    plt.plot([1,2,4,8], efficiency.T[5], marker="x", label="pot3d")
    plt.plot([1,2,4,8], efficiency.T[6], marker="x", label="sph_exa")
    plt.plot([1,2,4,8], efficiency.T[7], marker="x", label="hpgmgfv")
    plt.plot([1,2,4,8], efficiency.T[8], marker="x", label="weather")
    plt.legend(loc="lower left")
    plt.xlabel("Number of nodes (64 cores/node)")
    plt.ylabel("Parallel efficiency(%)")
    plt.savefig("g3_tiny_gnu9_omp_2ppn_efficiency.pdf")
    plt.clf()

def g3_tiny_gnu9_omp_4ppn_time(times):
    times = np.log10(times)
    plt.title("Tiny suite - Graviton3 - GNU 9 Compiler - OMP Runtime (4 ranks/node)")
    plt.xticks([1,2,4,8])
    plt.xlim([1, 8])
    plt.ylim([2, 3.4])
    plt.plot([1,2,4,8], times.T[0], marker="x", label="lbm")
    plt.plot([1,2,4,8], times.T[1], marker="x", label="soma")
    plt.plot([1,2,4,8], times.T[2], marker="x", label="tealeaf")
    plt.plot([1,2,4,8], times.T[3], marker="x", label="clvleaf")
    plt.plot([1,2,4,8], times.T[4], marker="x", label="miniswp")
    plt.plot([1,2,4,8], times.T[5], marker="x", label="pot3d")
    plt.plot([1,2,4,8], times.T[6], marker="x", label="sph_exa")
    plt.plot([1,2,4,8], times.T[7], marker="x", label="hpgmgfv")
    plt.plot([1,2,4,8], times.T[8], marker="x", label="weather")
    plt.legend(loc="upper right")
    plt.xlabel("Number of nodes (64 cores/node)")
    plt.ylabel("$log_{10}$ Time(s)")
    plt.savefig("g3_tiny_gnu9_omp_4ppn_time.pdf")
    plt.clf()

def g3_tiny_gnu9_omp_4ppn_speedup(times):
    speedup = times[0]/times
    plt.title("Tiny suite - Graviton3 - GNU 9 Compiler - OMP Speedup (4 ranks/node)")
    plt.xticks([1,2,4,8])
    plt.xlim([1, 8])
    plt.ylim([1, 12])
    plt.plot(np.arange(0, 9), c="grey", linestyle="--")
    plt.plot([1,2,4,8], speedup.T[0], marker="x", label="lbm")
    plt.plot([1,2,4,8], speedup.T[1], marker="x", label="soma")
    plt.plot([1,2,4,8], speedup.T[2], marker="x", label="tealeaf")
    plt.plot([1,2,4,8], speedup.T[3], marker="x", label="clvleaf")
    plt.plot([1,2,4,8], speedup.T[4], marker="x", label="miniswp")
    plt.plot([1,2,4,8], speedup.T[5], marker="x", label="pot3d")
    plt.plot([1,2,4,8], speedup.T[6], marker="x", label="sph_exa")
    plt.plot([1,2,4,8], speedup.T[7], marker="x", label="hpgmgfv")
    plt.plot([1,2,4,8], speedup.T[8], marker="x", label="weather")
    plt.legend(loc="upper left")
    plt.xlabel("Number of nodes (64 cores/node)")
    plt.ylabel("Speedup")
    plt.savefig("g3_tiny_gnu9_omp_4ppn_speedup.pdf")
    plt.clf()

def g3_tiny_gnu9_omp_4ppn_efficiency(times):
    speedup = times[0]/times
    efficiency = speedup/np.array([[1],[2],[4],[8]]) * 100
    plt.title("Tiny suite - Graviton3 - GNU 9 Compiler - OMP Efficiency (4 ranks/node)")
    plt.xticks([1,2,4,8])
    plt.xlim([1, 8])
    plt.ylim([40, 140])
    plt.axhline(y=100, c="grey", linestyle="--")
    plt.plot([1,2,4,8], efficiency.T[0], marker="x", label="lbm")
    plt.plot([1,2,4,8], efficiency.T[1], marker="x", label="soma")
    plt.plot([1,2,4,8], efficiency.T[2], marker="x", label="tealeaf")
    plt.plot([1,2,4,8], efficiency.T[3], marker="x", label="clvleaf")
    plt.plot([1,2,4,8], efficiency.T[4], marker="x", label="miniswp")
    plt.plot([1,2,4,8], efficiency.T[5], marker="x", label="pot3d")
    plt.plot([1,2,4,8], efficiency.T[6], marker="x", label="sph_exa")
    plt.plot([1,2,4,8], efficiency.T[7], marker="x", label="hpgmgfv")
    plt.plot([1,2,4,8], efficiency.T[8], marker="x", label="weather")
    plt.legend(loc="lower left")
    plt.xlabel("Number of nodes (64 cores/node)")
    plt.ylabel("Parallel efficiency(%)")
    plt.savefig("g3_tiny_gnu9_omp_4ppn_efficiency.pdf")
    plt.clf()

def g3_tiny_gnu9_omp_8ppn_time(times):
    times = np.log10(times)
    plt.title("Tiny suite - Graviton3 - GNU 9 Compiler - OMP Runtime (8 ranks/node)")
    plt.xticks([1,2,4,8])
    plt.xlim([1, 8])
    plt.ylim([2, 3.4])
    plt.plot([1,2,4,8], times.T[0], marker="x", label="lbm")
    plt.plot([1,2,4,8], times.T[1], marker="x", label="soma")
    plt.plot([1,2,4,8], times.T[2], marker="x", label="tealeaf")
    plt.plot([1,2,4,8], times.T[3], marker="x", label="clvleaf")
    plt.plot([1,2,4,8], times.T[4], marker="x", label="miniswp")
    plt.plot([1,2,4,8], times.T[5], marker="x", label="pot3d")
    plt.plot([1,2,4,8], times.T[6], marker="x", label="sph_exa")
    plt.plot([1,2,4,8], times.T[7], marker="x", label="hpgmgfv")
    plt.plot([1,2,4,8], times.T[8], marker="x", label="weather")
    plt.legend(loc="upper right")
    plt.xlabel("Number of nodes (64 cores/node)")
    plt.ylabel("$log_{10}$ Time(s)")
    plt.savefig("g3_tiny_gnu9_omp_8ppn_time.pdf")
    plt.clf()

def g3_tiny_gnu9_omp_8ppn_speedup(times):
    speedup = times[0]/times
    plt.title("Tiny suite - Graviton3 - GNU 9 Compiler - OMP Speedup (8 ranks/node)")
    plt.xticks([1,2,4,8])
    plt.xlim([1, 8])
    plt.ylim([1, 12])
    plt.plot(np.arange(0, 9), c="grey", linestyle="--")
    plt.plot([1,2,4,8], speedup.T[0], marker="x", label="lbm")
    plt.plot([1,2,4,8], speedup.T[1], marker="x", label="soma")
    plt.plot([1,2,4,8], speedup.T[2], marker="x", label="tealeaf")
    plt.plot([1,2,4,8], speedup.T[3], marker="x", label="clvleaf")
    plt.plot([1,2,4,8], speedup.T[4], marker="x", label="miniswp")
    plt.plot([1,2,4,8], speedup.T[5], marker="x", label="pot3d")
    plt.plot([1,2,4,8], speedup.T[6], marker="x", label="sph_exa")
    plt.plot([1,2,4,8], speedup.T[7], marker="x", label="hpgmgfv")
    plt.plot([1,2,4,8], speedup.T[8], marker="x", label="weather")
    plt.legend(loc="upper left")
    plt.xlabel("Number of nodes (64 cores/node)")
    plt.ylabel("Speedup")
    plt.savefig("g3_tiny_gnu9_omp_8ppn_speedup.pdf")
    plt.clf()

def g3_tiny_gnu9_omp_8ppn_efficiency(times):
    speedup = times[0]/times
    efficiency = speedup/np.array([[1],[2],[4],[8]]) * 100
    plt.title("Tiny suite - Graviton3 - GNU 9 Compiler - OMP Efficiency (8 ranks/node)")
    plt.xticks([1,2,4,8])
    plt.xlim([1, 8])
    plt.ylim([40, 140])
    plt.axhline(y=100, c="grey", linestyle="--")
    plt.plot([1,2,4,8], efficiency.T[0], marker="x", label="lbm")
    plt.plot([1,2,4,8], efficiency.T[1], marker="x", label="soma")
    plt.plot([1,2,4,8], efficiency.T[2], marker="x", label="tealeaf")
    plt.plot([1,2,4,8], efficiency.T[3], marker="x", label="clvleaf")
    plt.plot([1,2,4,8], efficiency.T[4], marker="x", label="miniswp")
    plt.plot([1,2,4,8], efficiency.T[5], marker="x", label="pot3d")
    plt.plot([1,2,4,8], efficiency.T[6], marker="x", label="sph_exa")
    plt.plot([1,2,4,8], efficiency.T[7], marker="x", label="hpgmgfv")
    plt.plot([1,2,4,8], efficiency.T[8], marker="x", label="weather")
    plt.legend(loc="lower left")
    plt.xlabel("Number of nodes (64 cores/node)")
    plt.ylabel("Parallel efficiency(%)")
    plt.savefig("g3_tiny_gnu9_omp_8ppn_efficiency.pdf")
    plt.clf()

def g3_tiny_gnu9_omp_16ppn_time(times):
    times = np.log10(times)
    plt.title("Tiny suite - Graviton3 - GNU 9 Compiler - OMP Runtime (16 ranks/node)")
    plt.xticks([1,2,4,8])
    plt.xlim([1, 8])
    plt.ylim([2, 3.4])
    plt.plot([1,2,4,8], times.T[0], marker="x", label="lbm")
    plt.plot([1,2,4,8], times.T[1], marker="x", label="soma")
    plt.plot([1,2,4,8], times.T[2], marker="x", label="tealeaf")
    plt.plot([1,2,4,8], times.T[3], marker="x", label="clvleaf")
    plt.plot([1,2,4,8], times.T[4], marker="x", label="miniswp")
    plt.plot([1,2,4,8], times.T[5], marker="x", label="pot3d")
    plt.plot([1,2,4,8], times.T[6], marker="x", label="sph_exa")
    plt.plot([1,2,4,8], times.T[7], marker="x", label="hpgmgfv")
    plt.plot([1,2,4,8], times.T[8], marker="x", label="weather")
    plt.legend(loc="upper right")
    plt.xlabel("Number of nodes (64 cores/node)")
    plt.ylabel("$log_{10}$ Time(s)")
    plt.savefig("g3_tiny_gnu9_omp_16ppn_time.pdf")
    plt.clf()

def g3_tiny_gnu9_omp_16ppn_speedup(times):
    speedup = times[0]/times
    plt.title("Tiny suite - Graviton3 - GNU 9 Compiler - OMP Speedup (16 ranks/node)")
    plt.xticks([1,2,4,8])
    plt.xlim([1, 8])
    plt.ylim([1, 12])
    plt.plot(np.arange(0, 9), c="grey", linestyle="--")
    plt.plot([1,2,4,8], speedup.T[0], marker="x", label="lbm")
    plt.plot([1,2,4,8], speedup.T[1], marker="x", label="soma")
    plt.plot([1,2,4,8], speedup.T[2], marker="x", label="tealeaf")
    plt.plot([1,2,4,8], speedup.T[3], marker="x", label="clvleaf")
    plt.plot([1,2,4,8], speedup.T[4], marker="x", label="miniswp")
    plt.plot([1,2,4,8], speedup.T[5], marker="x", label="pot3d")
    plt.plot([1,2,4,8], speedup.T[6], marker="x", label="sph_exa")
    plt.plot([1,2,4,8], speedup.T[7], marker="x", label="hpgmgfv")
    plt.plot([1,2,4,8], speedup.T[8], marker="x", label="weather")
    plt.legend(loc="upper left")
    plt.xlabel("Number of nodes (64 cores/node)")
    plt.ylabel("Speedup")
    plt.savefig("g3_tiny_gnu9_omp_16ppn_speedup.pdf")
    plt.clf()

def g3_tiny_gnu9_omp_16ppn_efficiency(times):
    speedup = times[0]/times
    efficiency = speedup/np.array([[1],[2],[4],[8]]) * 100
    plt.title("Tiny suite - Graviton3 - GNU 9 Compiler - OMP Efficiency (16 ranks/node)")
    plt.xticks([1,2,4,8])
    plt.xlim([1, 8])
    plt.ylim([40, 140])
    plt.axhline(y=100, c="grey", linestyle="--")
    plt.plot([1,2,4,8], efficiency.T[0], marker="x", label="lbm")
    plt.plot([1,2,4,8], efficiency.T[1], marker="x", label="soma")
    plt.plot([1,2,4,8], efficiency.T[2], marker="x", label="tealeaf")
    plt.plot([1,2,4,8], efficiency.T[3], marker="x", label="clvleaf")
    plt.plot([1,2,4,8], efficiency.T[4], marker="x", label="miniswp")
    plt.plot([1,2,4,8], efficiency.T[5], marker="x", label="pot3d")
    plt.plot([1,2,4,8], efficiency.T[6], marker="x", label="sph_exa")
    plt.plot([1,2,4,8], efficiency.T[7], marker="x", label="hpgmgfv")
    plt.plot([1,2,4,8], efficiency.T[8], marker="x", label="weather")
    plt.legend(loc="lower left")
    plt.xlabel("Number of nodes (64 cores/node)")
    plt.ylabel("Parallel efficiency(%)")
    plt.savefig("g3_tiny_gnu9_omp_16ppn_efficiency.pdf")
    plt.clf()

def g3_tiny_gnu9_omp_32ppn_time(times):
    times = np.log10(times)
    plt.title("Tiny suite - Graviton3 - GNU 9 Compiler - OMP Runtime (32 ranks/node)")
    plt.xticks([1,2,4,8])
    plt.xlim([1, 8])
    plt.ylim([2, 3.4])
    plt.plot([1,2,4,8], times.T[0], marker="x", label="lbm")
    plt.plot([1,2,4,8], times.T[1], marker="x", label="soma")
    plt.plot([1,2,4,8], times.T[2], marker="x", label="tealeaf")
    plt.plot([1,2,4,8], times.T[3], marker="x", label="clvleaf")
    plt.plot([1,2,4,8], times.T[4], marker="x", label="miniswp")
    plt.plot([1,2,4,8], times.T[5], marker="x", label="pot3d")
    plt.plot([1,2,4,8], times.T[6], marker="x", label="sph_exa")
    plt.plot([1,2,4,8], times.T[7], marker="x", label="hpgmgfv")
    plt.plot([1,2,4,8], times.T[8], marker="x", label="weather")
    plt.legend(loc="upper right")
    plt.xlabel("Number of nodes (64 cores/node)")
    plt.ylabel("$log_{10}$ Time(s)")
    plt.savefig("g3_tiny_gnu9_omp_32ppn_time.pdf")
    plt.clf()

def g3_tiny_gnu9_omp_32ppn_speedup(times):
    speedup = times[0]/times
    plt.title("Tiny suite - Graviton3 - GNU 9 Compiler - OMP Speedup (32 ranks/node)")
    plt.xticks([1,2,4,8])
    plt.xlim([1, 8])
    plt.ylim([1, 12])
    plt.plot(np.arange(0, 9), c="grey", linestyle="--")
    plt.plot([1,2,4,8], speedup.T[0], marker="x", label="lbm")
    plt.plot([1,2,4,8], speedup.T[1], marker="x", label="soma")
    plt.plot([1,2,4,8], speedup.T[2], marker="x", label="tealeaf")
    plt.plot([1,2,4,8], speedup.T[3], marker="x", label="clvleaf")
    plt.plot([1,2,4,8], speedup.T[4], marker="x", label="miniswp")
    plt.plot([1,2,4,8], speedup.T[5], marker="x", label="pot3d")
    plt.plot([1,2,4,8], speedup.T[6], marker="x", label="sph_exa")
    plt.plot([1,2,4,8], speedup.T[7], marker="x", label="hpgmgfv")
    plt.plot([1,2,4,8], speedup.T[8], marker="x", label="weather")
    plt.legend(loc="upper left")
    plt.xlabel("Number of nodes (64 cores/node)")
    plt.ylabel("Speedup")
    plt.savefig("g3_tiny_gnu9_omp_32ppn_speedup.pdf")
    plt.clf()

def g3_tiny_gnu9_omp_32ppn_efficiency(times):
    speedup = times[0]/times
    efficiency = speedup/np.array([[1],[2],[4],[8]]) * 100
    plt.title("Tiny suite - Graviton3 - GNU 9 Compiler - OMP Efficiency (32 ranks/node)")
    plt.xticks([1,2,4,8])
    plt.xlim([1, 8])
    plt.ylim([40, 140])
    plt.axhline(y=100, c="grey", linestyle="--")
    plt.plot([1,2,4,8], efficiency.T[0], marker="x", label="lbm")
    plt.plot([1,2,4,8], efficiency.T[1], marker="x", label="soma")
    plt.plot([1,2,4,8], efficiency.T[2], marker="x", label="tealeaf")
    plt.plot([1,2,4,8], efficiency.T[3], marker="x", label="clvleaf")
    plt.plot([1,2,4,8], efficiency.T[4], marker="x", label="miniswp")
    plt.plot([1,2,4,8], efficiency.T[5], marker="x", label="pot3d")
    plt.plot([1,2,4,8], efficiency.T[6], marker="x", label="sph_exa")
    plt.plot([1,2,4,8], efficiency.T[7], marker="x", label="hpgmgfv")
    plt.plot([1,2,4,8], efficiency.T[8], marker="x", label="weather")
    plt.legend(loc="lower left")
    plt.xlabel("Number of nodes (64 cores/node)")
    plt.ylabel("Parallel efficiency(%)")
    plt.savefig("g3_tiny_gnu9_omp_32ppn_efficiency.pdf")
    plt.clf()

def g3_tiny_gnu9_total_time(times):
    times = np.log10(times)
    plt.title("Tiny suite - Graviton3 - GNU 9 Compiler - Total Runtime")
    plt.xticks([1,2,4,8])
    plt.xlim([1, 8])
    plt.ylim([3.0, 4.2])
    plt.plot([1,2,4,8], times[0], marker="x", label="1x64")
    plt.plot([1,2,4,8], times[1], marker="x", label="2x32")
    plt.plot([1,2,4,8], times[2], marker="x", label="4x16")
    plt.plot([1,2,4,8], times[3], marker="x", label="8x8")
    plt.plot([1,2,4,8], times[4], marker="x", label="16x4")
    plt.plot([1,2,4,8], times[5], marker="x", label="32x2")
    plt.plot([1,2,4,8], times[6], marker="x", label="64x1")
    plt.legend(loc="upper right")
    plt.xlabel("Number of nodes (64 cores/node)")
    plt.ylabel("$log_{10}$ Time(s)")
    plt.savefig("g3_tiny_gnu9_total_time.pdf")
    plt.clf()

def g3_tiny_gnu9_spec_score(scores):
    plt.title("Tiny suite - Graviton3 - GNU 9 Compiler - SPEC Score")
    plt.xticks([1,2,4,8])
    plt.xlim([1, 8])
    plt.ylim([0, 18])
    plt.plot([1,2,4,8], scores[0], marker="x", label="1x64")
    plt.plot([1,2,4,8], scores[1], marker="x", label="2x32")
    plt.plot([1,2,4,8], scores[2], marker="x", label="4x16")
    plt.plot([1,2,4,8], scores[3], marker="x", label="8x8")
    plt.plot([1,2,4,8], scores[4], marker="x", label="16x4")
    plt.plot([1,2,4,8], scores[5], marker="x", label="32x2")
    plt.plot([1,2,4,8], scores[6], marker="x", label="64x1")
    plt.legend(loc="upper left")
    plt.xlabel("Number of nodes (64 cores/node)")
    plt.ylabel("SPEC Score")
    plt.savefig("g3_tiny_gnu9_spec_score.pdf")   
    plt.clf() 

def main():

    g3_tiny_gnu9_mpi_times = np.array([[444,827,700,565,356,914,496,486,725],
                                     [221,452,1733,306,275,557,304,269,369],
                                     [111,271,305,156,175,265,154,157,170],
                                     [100,100,100,100,100,100,100,100,100]])#placeholder
    g3_tiny_gnu9_omp_1ppn_times = np.array([[434,720,706,623,225,947,693,470,735],
                                            [228,376,371,291,193,487,380,321,376],
                                            [100,100,100,100,100,100,100,100,100],
                                            [100,100,100,100,100,100,100,100,100]])
    g3_tiny_gnu9_omp_2ppn_times = np.array([[434,741,705,567,233,941,605,475,707],
                                            [224,381,365,287,181,481,303,276,350],
                                            [100,100,100,100,100,100,100,100,100],
                                            [100,100,100,100,100,100,100,100,100]])
    g3_tiny_gnu9_omp_4ppn_times = np.array([[428,745,695,566,230,943,517,473,698],
                                            [218,387,359,285,173,468,270,283,326],
                                            [100,100,100,100,100,100,100,100,100],
                                            [100,100,100,100,100,100,100,100,100]])
    g3_tiny_gnu9_omp_8ppn_times = np.array([[427,752,695,565,258,928,494,472,687],
                                            [216,388,363,283,178,474,268,290,318],
                                            [100,100,100,100,100,100,100,100,100],
                                            [100,100,100,100,100,100,100,100,100]])
    g3_tiny_gnu9_omp_16ppn_times = np.array([[432,766,700,559,272,928,491,474,696],
                                            [219,397,366,284,196,486,291,281,326],
                                            [100,100,100,100,100,100,100,100,100],
                                            [100,100,100,100,100,100,100,100,100]])
    g3_tiny_gnu9_omp_32ppn_times = np.array([[431,791,699,560,332,910,496,477,705],
                                            [219,419,385,290,212,464,269,276,339],
                                            [100,100,100,100,100,100,100,100,100],
                                            [100,100,100,100,100,100,100,100,100]])
    g3_tiny_gnu9_total_times = np.array([g3_tiny_gnu9_omp_1ppn_times.sum(axis=1),
                                     g3_tiny_gnu9_omp_2ppn_times.sum(axis=1),
                                     g3_tiny_gnu9_omp_4ppn_times.sum(axis=1),
                                     g3_tiny_gnu9_omp_8ppn_times.sum(axis=1),
                                     g3_tiny_gnu9_omp_16ppn_times.sum(axis=1),
                                     g3_tiny_gnu9_omp_32ppn_times.sum(axis=1),
                                     g3_tiny_gnu9_mpi_times.sum(axis=1)])
    g3_tiny_gnu9_spec_scores = np.array([[3.51,6.24,12,24],#end 12/24s are placeholders
                                        [3.59,6.64,12,24],
                                        [3.67,6.84,12,24],
                                        [3.66,6.81,12,24],
                                        [3.62,6.63,12,24],
                                        [3.53,6.56,12,24],
                                        [3.45,5.10,10.8,24]])
    g3_tiny_gnu9_mpi_time(g3_tiny_gnu9_mpi_times)
    g3_tiny_gnu9_mpi_speedup(g3_tiny_gnu9_mpi_times)
    g3_tiny_gnu9_mpi_efficiency(g3_tiny_gnu9_mpi_times)
    g3_tiny_gnu9_omp_1ppn_time(g3_tiny_gnu9_omp_1ppn_times)
    g3_tiny_gnu9_omp_1ppn_speedup(g3_tiny_gnu9_omp_1ppn_times)
    g3_tiny_gnu9_omp_1ppn_efficiency(g3_tiny_gnu9_omp_1ppn_times)
    g3_tiny_gnu9_omp_2ppn_time(g3_tiny_gnu9_omp_2ppn_times)
    g3_tiny_gnu9_omp_2ppn_speedup(g3_tiny_gnu9_omp_2ppn_times)
    g3_tiny_gnu9_omp_2ppn_efficiency(g3_tiny_gnu9_omp_2ppn_times)
    g3_tiny_gnu9_omp_4ppn_time(g3_tiny_gnu9_omp_4ppn_times)
    g3_tiny_gnu9_omp_4ppn_speedup(g3_tiny_gnu9_omp_4ppn_times)
    g3_tiny_gnu9_omp_4ppn_efficiency(g3_tiny_gnu9_omp_4ppn_times)
    g3_tiny_gnu9_omp_8ppn_time(g3_tiny_gnu9_omp_8ppn_times)
    g3_tiny_gnu9_omp_8ppn_speedup(g3_tiny_gnu9_omp_8ppn_times)
    g3_tiny_gnu9_omp_8ppn_efficiency(g3_tiny_gnu9_omp_8ppn_times)
    g3_tiny_gnu9_omp_16ppn_time(g3_tiny_gnu9_omp_16ppn_times)
    g3_tiny_gnu9_omp_16ppn_speedup(g3_tiny_gnu9_omp_16ppn_times)
    g3_tiny_gnu9_omp_16ppn_efficiency(g3_tiny_gnu9_omp_16ppn_times)
    g3_tiny_gnu9_omp_32ppn_time(g3_tiny_gnu9_omp_32ppn_times)
    g3_tiny_gnu9_omp_32ppn_speedup(g3_tiny_gnu9_omp_32ppn_times)
    g3_tiny_gnu9_omp_32ppn_efficiency(g3_tiny_gnu9_omp_32ppn_times)
    g3_tiny_gnu9_total_time(g3_tiny_gnu9_total_times)
    g3_tiny_gnu9_spec_score(g3_tiny_gnu9_spec_scores)


if __name__ == "__main__":
    main()
